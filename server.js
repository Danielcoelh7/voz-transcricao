import express from "express";
import multer from "multer";
import cors from "cors";
import fs from "fs";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { v4 as uuidv4 } from "uuid";
import ffmpeg from "fluent-ffmpeg";
import ffmpegStatic from "ffmpeg-static";

// ==========================
// Configura√ß√£o do FFmpeg
// ==========================
ffmpeg.setFfmpegPath(ffmpegStatic);

const app = express();
const upload = multer({ dest: "uploads/" });
app.use(cors());
app.use(express.json())

// ==========================
// Configura√ß√£o da API Gemini
// ==========================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// Banco em mem√≥ria para controlar os jobs
const jobs = {};

// ==========================
// Fun√ß√£o auxiliar: converte arquivo em formato aceito pelo Gemini
// ==========================
function fileToGenerativePart(path, mimeType) {
  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString("base64"),
      mimeType,
    },
  };
}

// ==========================
// Fun√ß√£o: selecionar modelo dispon√≠vel automaticamente (A SUA VERS√ÉO)
// ==========================
async function selecionarModeloDisponivel() {
  const modelosPreferidos = [
    "gemini-2.0-flash",
    "gemini-2.0-pro",
    "gemini-1.5-pro",
    "gemini-1.5-flash",
  ];

  for (const nomeModelo of modelosPreferidos) {
    try {
      console.log(`[INFO] Testando modelo: ${nomeModelo}...`);
      const model = genAI.getGenerativeModel({ model: nomeModelo });

      // Teste r√°pido de disponibilidade
      const result = await model.generateContent("Teste de disponibilidade do modelo.");
      if (result?.response) {
        console.log(`[SUCESSO] Modelo dispon√≠vel: ${nomeModelo}`);
        return model;
      }
    } catch (err) {
      const code = err?.status || err?.statusCode || err?.code;
      console.warn(`[ERRO] Modelo ${nomeModelo} falhou (${code || err.message}). Tentando o pr√≥ximo...`);
      if (code === 429 || code === 503) continue;
    }
  }

  throw new Error("Nenhum modelo Gemini dispon√≠vel no momento.");
}

// ================================
// 1Ô∏è‚É£ ENDPOINT DE TRANSCRI√á√ÉO (ATUALIZADO com formata√ß√£o de pergunta)
// ================================
app.post("/transcribe-chunked", upload.single("audio"), (req, res) => {
  if (!req.file) {
    console.error("[ERRO] Nenhum arquivo recebido.");
    return res.status(400).json({ error: "Nenhum arquivo de √°udio enviado." });
  }

  const jobId = uuidv4();
  const filePath = req.file.path;
  const outputDir = `uploads/${jobId}`;

  console.log(`[JOB ${jobId}] Iniciado. Arquivo: ${filePath}`);

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Retorna resposta imediata ao front
  res.status(202).json({ jobId });

  // Marca o job como em andamento
  jobs[jobId] = { status: "splitting", progress: 0 };

  // ==========================
  // DIVIS√ÉO DO √ÅUDIO EM CHUNKS
  // ==========================
  console.log(`[JOB ${jobId}] Dividindo o √°udio com FFmpeg...`);

  ffmpeg(filePath)
    .outputOptions(["-f segment", "-segment_time 120", "-c copy"]) // 2 minutos por chunk
    .output(`${outputDir}/chunk_%03d.mp3`)
    .on("end", async () => {
      console.log(`[JOB ${jobId}] Divis√£o conclu√≠da.`);

      jobs[jobId].status = "processing";
      const chunkFiles = fs.readdirSync(outputDir).sort();
      console.log(`[JOB ${jobId}] ${chunkFiles.length} partes encontradas.`);

      let fullTranscription = [];

      // Seleciona modelo dispon√≠vel (fallback autom√°tico)
      const model = await selecionarModeloDisponivel();

      // =========================================
      // PROCESSAMENTO DE CADA CHUNK (TRANSCRI√á√ÉO)
      // =========================================
      for (let i = 0; i < chunkFiles.length; i++) {
        const chunkPath = `${outputDir}/${chunkFiles[i]}`;
        try {
          console.log(`[JOB ${jobId}] Transcrevendo ${chunkFiles[i]}...`);

          const audioPart = fileToGenerativePart(chunkPath, "audio/mp3");
          const prompt = "Transcreva o √°udio a seguir na √≠ntegra, sem coment√°rios.";

          const result = await model.generateContent([prompt, audioPart]);
          const text = result.response.text();

          fullTranscription.push(text);
          jobs[jobId].progress = ((i + 1) / chunkFiles.length) * 100;

          // Aguarda 2 segundos entre os chunks (evita sobrecarga 503)
          await new Promise(res => setTimeout(res, 2000));
        } catch (error) {
          console.error(`[JOB ${jobId}] Erro no chunk ${i + 1}:`, error.message);
          fullTranscription.push(`[ERRO NA TRANSCRI√á√ÉO DO TRECHO ${i + 1}]`);
        }
      }

      console.log(`[JOB ${jobId}] Transcri√ß√£o completa.`);
      const fullText = fullTranscription.join(" ");

      // --- IN√çCIO DA ADI√á√ÉO: L√ìGICA DE FORMATA√á√ÉO DE PERGUNTA ---
      console.log(`[JOB ${jobId}] Formatando perguntas...`);
      const regex = /(pergunta)(\s+)(.*?)(\s+)(ponto)/gi;
      const replacement = '$1$2($3)$4$5';
      const formattedText = fullText.replace(regex, replacement);
      // --- FIM DA ADI√á√ÉO ---


      // ==============================
      // üß† GERA√á√ÉO DE RESUMO EM T√ìPICOS
      // ==============================
      try {
        jobs[jobId].status = "summarizing";
        console.log(`[JOB ${jobId}] Gerando resumo em t√≥picos...`);

        const summaryPrompt = `
        Gere um resumo **em t√≥picos** (marcados com "‚Ä¢") a partir do texto abaixo.
        O resumo deve conter as ideias principais, sem repetir frases.
        N√£o diga que precisa do texto, apenas gere o resumo.
        
        Texto:
        """${formattedText}""" 
        `; // <--- MODIFICADO: usa formattedText

        const summaryModel = await selecionarModeloDisponivel();
        const summaryResult = await summaryModel.generateContent(summaryPrompt);
        const summaryText = summaryResult.response.text();

        jobs[jobId] = {
          status: "completed",
          transcription: formattedText, // <--- MODIFICADO: usa formattedText
          summary: summaryText,
          progress: 100,
        };

        console.log(`[JOB ${jobId}] Resumo gerado com sucesso.`);
      } catch (error) {
        console.error(`[JOB ${jobId}] Erro ao gerar resumo:`, error);
        jobs[jobId] = {
          status: "completed",
          transcription: formattedText, // <--- MODIFICADO: usa formattedText
          summary: "[Erro ao gerar resumo autom√°tico]",
          progress: 100,
        };
      }

      // ==============================
      // LIMPEZA FINAL
      // ==============================
      console.log(`[JOB ${jobId}] Limpando arquivos tempor√°rios.`);
      fs.rmSync(outputDir, { recursive: true, force: true });
      fs.unlinkSync(filePath);
    })
    .on("error", (err) => {
      console.error(`[JOB ${jobId}] [FFmpeg] ERRO:`, err.message);
      jobs[jobId] = { status: "failed", error: "Erro ao dividir o √°udio." };

      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
      if (fs.existsSync(outputDir)) fs.rmSync(outputDir, { recursive: true, force: true });
    })
    .run();
});

// ================================
// 2Ô∏è‚É£ ENDPOINT DE STATUS
// ================================
app.get("/status/:jobId", (req, res) => {
  const { jobId } = req.params;
  const job = jobs[jobId];

  if (!job) {
    return res.status(404).json({ error: "Trabalho n√£o encontrado." });
  }

  res.json(job);
});

// ===================================
// 3Ô∏è‚É£ ENDPOINT: GERADOR DE ATIVIDADES (O SEU C√ìDIGO)
// ===================================
app.post("/generate-activity", async (req, res) => {
    const { summaryText, options } = req.body;

    if (!summaryText || !options) {
        return res.status(400).json({ error: "Dados insuficientes para gerar a atividade." });
    }

    let prompt = `Com base no resumo: "${summaryText}".\nElabore uma atividade escolar no n√≠vel ${options.difficulty} seguindo as regras:\n`;

    if (options.type === "dissertativa") {
        prompt += `- Crie exatamente ${options.quantity} quest√µes dissertativas.\n- As perguntas devem incentivar o pensamento cr√≠tico.`;
        prompt += `\n- N√£o inclua respostas ou gabarito no final.`;

    } else if (options.type === "objetiva") {

        // --- BLOCO ATUALIZADO PARA V/F TIPO SEQU√äNCIA ---
        if (options.questionType === "verdadeiro ou falso") {
            prompt += `- Crie EXATAMENTE ${options.quantity} quest√µes independentes de Verdadeiro/Falso no formato de sequ√™ncia.\n`;
            prompt += `- Numere cada quest√£o principal claramente (1., 2., 3., ... ${options.quantity}.).\n`;
            prompt += `- PARA CADA UMA DESSAS ${options.quantity} QUEST√ïES, fa√ßa o seguinte:\n`;
            prompt += `    1. Crie 4 afirma√ß√µes curtas sobre o texto (verdadeiras ou falsas).\n`;
            prompt += `    2. Formate CADA afirma√ß√£o iniciando com par√™nteses vazios: ( ). Exemplo: ( ) Afirma√ß√£o X.\n`;
            prompt += `    3. Ap√≥s as 4 afirma√ß√µes, inclua EXATAMENTE a frase: "Assinale a alternativa que apresenta a sequ√™ncia correta, de cima para baixo:"\n`;
            prompt += `    4. Crie 4 alternativas (A, B, C, D), cada uma contendo uma sequ√™ncia de 4 V's e F's (Exemplo: A) V, F, V, F).\n`;
            prompt += `    5. APENAS UMA dessas 4 alternativas (A, B, C, D) deve conter a sequ√™ncia CORRETA de V/F baseada nas 4 afirma√ß√µes que voc√™ criou para ESSA quest√£o.\n`;
            prompt += `- **IMPORTANTE: No final de TODO o texto da atividade (ap√≥s a ${options.quantity}¬™ quest√£o), adicione as respostas corretas (APENAS a letra da alternativa correta para CADA quest√£o principal), em sequ√™ncia, em uma linha separada, formatada EXATAMENTE assim: GABARITO:[LetraQ1,LetraQ2,...LetraQ${options.quantity}] (Exemplo para 3 quest√µes: GABARITO:[B,A,D])**\n`;

        } else { // Para outros tipos de quest√µes objetivas
            prompt += `- Tipo de quest√£o: "${options.questionType}".\n`;
            prompt += `- Quantidade: Crie exatamente ${options.quantity} quest√µes.\n`;
            prompt += `- Numere cada quest√£o claramente (1., 2., 3., ...).\n`;
            prompt += `- Se o tipo for "m√∫ltipla escolha", forne√ßa 4 alternativas (A, B, C, D) para cada quest√£o.\n`;
            prompt += `- **IMPORTANTE: No final de TUDO, adicione as respostas corretas em uma linha separada, formatada EXATAMENTE assim: GABARITO:[A,B,D,C,...] (uma letra para cada quest√£o)**\n`;
        }
    }

    console.log(`[JOB ATIVIDADE] Gerando atividade do tipo "${options.type}" (${options.questionType || ''})...`);

    try {
        const model = await selecionarModeloDisponivel();
        const result = await model.generateContent(prompt);
        const fullResponseText = result.response.text();

        let activityText = fullResponseText;
        let answers = []; 

        const gabaritoMatch = fullResponseText.match(/GABARITO:\[(.*?)\]/i);

        if (gabaritoMatch && gabaritoMatch[1]) {
            activityText = fullResponseText.replace(/GABARITO:\[(.*?)\]/i, "").trim();
            // A l√≥gica de extra√ß√£o continua a mesma e funcionar√° para [B,A,D]
            answers = gabaritoMatch[1].split(',').map(ans => ans.trim().toUpperCase()); 
            console.log(`[JOB ATIVIDADE] Gabarito extra√≠do com sucesso:`, answers);
        } else {
            if (options.type === "objetiva") {
               console.warn("[JOB ATIVIDADE] Aviso: O formato do gabarito n√£o foi encontrado na resposta da IA para quest√£o objetiva.");
            } else {
               console.log("[JOB ATIVIDADE] Atividade dissertativa gerada sem gabarito (esperado).");
            }
        }
        res.json({ activityText, answers });

    } catch (error) {
        console.error("[JOB ATIVIDADE] Erro:", error.message);
        res.status(500).json({ error: "Ocorreu um erro na IA ao gerar a atividade." });
    }
});


// ===================================
// 4Ô∏è‚É£ ENDPOINT: VERIFICADOR DE GABARITO (ENDPOINT NOVO ADICIONADO)
// ===================================
app.post("/verify-answers", 
    upload.fields([
        { name: 'teacherKey', maxCount: 1 },
        { name: 'studentSheet', maxCount: 10 } // Permite at√© 10 imagens
    ]), 
    async (req, res) => {
        if (!req.files || !req.files.teacherKey || !req.files.studentSheet || req.files.studentSheet.length === 0) {
            return res.status(400).json({ error: "√â necess√°rio enviar o PDF do gabarito e pelo menos uma imagem do aluno." });
        }

        const teacherKeyFile = req.files.teacherKey[0];
        const studentSheetFiles = req.files.studentSheet; 
      const generationConfig = {
                temperature: 0.1, // Valor baixo (0.0 a 1.0) para respostas mais focadas e menos aleat√≥rias
            };

        console.log(`[JOB CORRE√á√ÉO] Iniciado. Gabarito: ${teacherKeyFile.path}, Respostas Aluno: ${studentSheetFiles.length} imagem(ns)`);

        const tempFilePaths = [teacherKeyFile.path];
        studentSheetFiles.forEach(file => tempFilePaths.push(file.path));

        // Array para guardar os resultados individuais
        const results = [];

        try {
            const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
            const teacherKeyPart = fileToGenerativePart(teacherKeyFile.path, teacherKeyFile.mimetype);

            // <<< MUDAN√áA AQUI: Loop para processar cada imagem individualmente >>>
            for (const studentFile of studentSheetFiles) {
                console.log(`[JOB CORRE√á√ÉO] Processando imagem: ${studentFile.originalname || studentFile.filename}`);
                const studentImagePart = fileToGenerativePart(studentFile.path, studentFile.mimetype);

                // <<< MUDAN√áA AQUI: Prompt focado em UMA imagem por vez >>>
                const singleImagePrompt = `
                   TASK: Correct a student's answer sheet image based on an official answer key PDF, checking for an invalidation mark.

                    INPUTS:
                    1. PDF file: Contains the questions, alternatives, and possibly a blank answer sheet section. THIS IS THE SOURCE OF TRUTH FOR THE CORRECT ANSWERS.
                    2. IMAGE file: A photo of the student's filled-in answer sheet (using 'X', scribbles, or filled circles). This image might contain a large red 'X' mark indicating the test is invalidated.

                    INSTRUCTIONS (Follow these steps precisely):
                    1.  **DEDUCE THE CORRECT ANSWER KEY:** Carefully read ONLY the questions and their multiple-choice options (A, B, C, D) within the PDF file. Determine the correct letter answer for each question number. **CRITICAL: IGNORE ANY SECTION TITLED "Folha de Respostas" or similar within the PDF.** Create the definitive answer key internally (e.g., 1-B, 2-D, 3-C...). Let 'Y' be the total number of questions found.
                    2.  **CHECK FOR INVALIDATION MARK:** Look CAREFULLY at the provided IMAGE file. Is there a large, distinct 'X' mark drawn in RED anywhere on the sheet?
                    3.  **OUTPUT IF INVALIDATED:** If you found a prominent RED 'X' mark in step 2, **STOP** immediately and output ONLY 'NOTA: 0/Y' (using the 'Y' from step 1). Do not proceed further.
                    4.  **ANALYZE STUDENT'S ANSWERS (if NO red 'X' was found):** If no red 'X' was present, analyze the IMAGE file. Identify precisely which single letter (A, B, C, or D) the student attempted to mark for each question number. Markings can be 'X', scribbles, or filled circles.
                    5.  **HANDLE AMBIGUITY/MULTIPLE MARKS:** If a student marked MORE THAN ONE option for a single question, or if the marking is completely unreadable/ambiguous, count that question as INCORRECT.
                    6.  **COMPARE AND COUNT (if NO red 'X' was found):** Compare the student's valid marked answers (from step 4 & 5) against the correct answer key (from step 1). Count only the questions where the student marked the single, correct letter. Let 'X' be this count.
                    7.  **OUTPUT FORMAT (if NO red 'X' was found):** Respond ONLY with the final score for THIS IMAGE in the strict format 'NOTA: X/Y', using the 'X' from step 6 and 'Y' from step 1. Example: NOTA: 3/5
                `;

               try {
                    // <<< MUDAN√áA 3: Passando a configurationConfig para a IA >>>
                    const result = await model.generateContent(
                        [singleImagePrompt, teacherKeyPart, studentImagePart],
                        generationConfig // Adicionado aqui
                    );
                    const fullResponseText = result.response.text();
                    const scoreMatch = fullResponseText.match(/NOTA: (\d+\/\d+)/);

                    if (scoreMatch && scoreMatch[1]) {
                        console.log(`[JOB CORRE√á√ÉO] Nota para ${studentFile.originalname || studentFile.filename}: ${scoreMatch[1]}`);
                        results.push({ 
                            fileName: studentFile.originalname || studentFile.filename, 
                            grade: scoreMatch[1] 
                        });
                    } else {
                        console.error(`[JOB CORRE√á√ÉO] N√£o foi poss√≠vel extrair nota para ${studentFile.originalname || studentFile.filename}:`, fullResponseText);
                        results.push({ 
                            fileName: studentFile.originalname || studentFile.filename, 
                            grade: "Erro na extra√ß√£o" 
                        });
                    }
                } catch (imageError) {
                     console.error(`[JOB CORRE√á√ÉO] Erro ao processar a imagem ${studentFile.originalname || studentFile.filename}:`, imageError.message);
                     results.push({ 
                        fileName: studentFile.originalname || studentFile.filename, 
                        grade: "Erro na IA" 
                    });
                }
                 await new Promise(resolve => setTimeout(resolve, 1000)); 
            } // Fim do loop for

            console.log("[JOB CORRE√á√ÉO] Processamento de todas as imagens conclu√≠do.");
            res.json({ individualGrades: results });

        } catch (error) {
            console.error("[JOB CORRE√á√ÉO] Erro geral:", error.message);
            res.status(500).json({ error: "Ocorreu um erro geral ao corrigir as atividades." });
        } finally {
            // Limpa TODOS os arquivos tempor√°rios
            tempFilePaths.forEach(path => {
                try {
                    if (fs.existsSync(path)) fs.unlinkSync(path);
                } catch (err) {
                    console.error(`Erro ao limpar arquivo tempor√°rio ${path}:`, err);
                }
            });
            console.log(`[JOB CORRE√á√ÉO] Arquivos tempor√°rios removidos.`);
        }
    }
);


// ================================
// 5Ô∏è‚É£ INICIALIZA√á√ÉO DO SERVIDOR (Renumerado)
// ================================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor rodando na porta ${PORT}`);
});












